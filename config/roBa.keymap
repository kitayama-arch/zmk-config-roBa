#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <3>;
    scroll-layers = <4>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W   &kp E   &kp R                       &kp T                                               &kp Y                &kp U  &kp I      &kp O    &lt 4 P
&kp A             &kp S   &kp D   &kp F                       &kp G               &kp LS(LG(S))      &kp MINUS    &kp H                &kp J  &kp K      &kp L    &kp AT
&mt LEFT_SHIFT Z  &kp X   &kp C   &kp V                       &kp B               &kp TAB            &kp TILDE    &kp N                &kp M  &kp COMMA  &kp DOT  &kp GLOBE
&kp LCTRL         &trans  &trans  &mt LEFT_COMMAND BACKSPACE  &mt LEFT_ALT LANG5  &lt 1 ENTER        &lt 2 SPACE  &mt RIGHT_ALT LANG4                             &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM {
            bindings = <
&kp KP_NUMBER_9  &kp KP_NUMBER_8  &kp KP_NUMBER_7  &kp KP_NUMBER_6  &kp KP_NUMBER_5                         &kp AMPS         &kp LT     &kp PLUS   &kp GT     &kp CARET
&kp KP_NUMBER_4  &kp KP_NUMBER_3  &kp KP_NUMBER_2  &kp KP_NUMBER_1  &kp KP_NUMBER_0  &trans      &kp QMARK  &kp EXCLAMATION  &kp SEMI   &kp DOT    &kp COLON  &kp BSLH
&trans           &trans           &kp LS(LG(N3))   &kp LG(LS(N4))   &kp LG(LS(N5))   &trans      &kp STAR   &kp PIPE         &kp SLASH  &kp UNDER  &kp PRCNT  &kp TILDE
&trans           &trans           &trans           &trans           &trans           &trans      &trans     &trans                                            &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LBKT  &kp DQT    &kp RBKT  &kp AT                                     &kp C_VOL_UP  &kp LC(LEFT_ARROW)  &kp UP_ARROW      &kp RC(RIGHT_ARROW)  &trans
&kp HOME        &kp LPAR  &kp SQT    &kp RPAR  &kp END   &trans      &kp LG(LS(LA(S)))    &kp C_VOL_DN  &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW      &kp C_BRI_UP
&kp LEFT_SHIFT  &kp LBRC  &kp GRAVE  &kp RBRC  &kp DLLR  &trans      &kp C_VOICE_COMMAND  &kp K_MUTE    &kp C_PREV          &kp C_PLAY_PAUSE  &kp C_NEXT           &kp C_BRI_DN
&trans          &trans    &trans     &trans    &trans    &trans      &trans               &trans                                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
